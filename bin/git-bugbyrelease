#!/bin/bash

# walk over a tito managed git repo, looking for bug id's in commits 
# and displays them grouped by release

declare -a releases

while [ "$1" != "" ]; do
    case $1 in
        -h | --help )           usage
                                exit
                                ;;
        -f | --features ) showfeatures=1
                                ;;
    esac
    shift
done

branch=
releases=( $(git log $1 --grep="Automatic" --format="format:%H") )

buglist () {
	bugs=$(git showbugs $1 $2)
	if [ -n "$bugs" ] ; then
		echo  "$bugs"
		echo
	fi
    if [ "$showfeatures" == "1" ] ; then
        features=$(git showfeatures $1 $2)
        if [ -n "$features" ] ; then
		    echo  "$features"
		    echo
	    fi
   fi
}


#handle the special case of changes that aren't released yet
head=$(git log -n1 --format="format:%H")
echo "HEAD"
if [ "$head" != "${releases[0]}" ] ; then
	buglist $head...${releases[0]}
fi

count=${#releases[@]}
for (( i = 0 ; i < count; i++ ))
do
	#echo ${releases[$i]}...${releases[$i+1]}
	if [ -n "${releases[$i]}" ] &&  [ -n "${releases[$i+1]}" ] ; then		
		git describe --exact-match "${releases[$i]}"
		# if we want to show the previous release
	        #git describe --exact-match "${releases[$i+1]}" 

		buglist ${releases[$i]}...${releases[$i+1]}
	fi
done
